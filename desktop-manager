#!/usr/bin/env python3
# desktop-manager.py
# Copyright Ryan Brue 2023

VERSION = "0.0.1"


import argparse, os, shutil
from pathlib import Path
from colorama import Fore, Back, Style
import os

SUCCESS = f'[{Fore.GREEN}SUCCESS{Fore.RESET}]'
PROMPT = f'[{Fore.YELLOW}PROMPT{Fore.RESET}]'
NOTICE = f'[{Fore.RED}NOTICE{Fore.RESET}]'


LOCAL_DESKTOP_APP_PATH = Path.home().joinpath(".local/share/applications/")
DESKTOP_MANAGER_BIN_PATH = Path.home().joinpath(".desktop-manager/")

# Get .desktop string
def populate_desktop_file_string(
        type=None,
        name="Untitled",
        generic_name=None,
        comment=None,
        icon=None,
        exec=None
) -> str:
    ret_str = "[Desktop Entry]\n# Auto-Generated by Desktop Manager. Do not edit unless you know what you are doing!\n"
    ret_str += f'Type={type}\n' if type else "Type=Application\n"
    ret_str += f'Version=1.5\n'
    ret_str += f'Name={name}\n' if name else ""
    ret_str += f'GenericName={generic_name}\n' if generic_name else ""
    ret_str += f'Comment={comment}\n' if comment else ""
    ret_str += f'Icon={icon}\n' if icon else ""
    ret_str += f'Exec={exec}\n' if exec else ""
    return ret_str

# File actions

def valid_dir(path: str):
    if os.path.isdir(path):
        return Path(path).resolve()
    else:
        raise NotADirectoryError(path)

def valid_file(path: str):
    if os.path.isfile(path):
        return Path(path).resolve()
    else:
        raise FileNotFoundError(path)

def make_directory_if_needed(path: Path):
    try:
        os.makedirs(path)
    except:
        print(path,"already exists, continuing...")

def move_file(from_path: Path, to_folder: Path, copy=False):
    src_file = from_path
    dst_file = to_folder.joinpath(src_file.name)
    if copy:
        shutil.copy2(src_file, dst_file)
    else:
        src_file.rename(dst_file)

def get_installed(name: str):
    installation_dir = DESKTOP_MANAGER_BIN_PATH.joinpath(Path(f'./{name}'))
    try:
        valid_dir(installation_dir)
        return installation_dir, True
    except:
        return installation_dir, False

def get_desktop_path(name):
    desktop_path = LOCAL_DESKTOP_APP_PATH.joinpath(f'{name}.desktop')
    try:
        valid_file(desktop_path)
        return desktop_path, True
    except:
        return desktop_path, False

def install(args):
    target_folder, exists = get_installed(args.name)
    if exists:
        print(args.name,"is already installed. Use desktop-manager.py uninstall",args.name,"to uninstall.")
        return
    
    prompt = input(f'{PROMPT} You are about to install {args.name} with executable "{args.executable if args.executable else "[NONE]"}" and icon "{args.icon if args.icon else "[NONE]"}".\nIs this okay? [y/N] ')
    
    if prompt != "y":
        print("Action cancelled by user.")
        return
    
    try:
        make_directory_if_needed(target_folder)
        if args.executable:
            move_file(args.executable, target_folder, copy=not args.delete)
        if args.icon:
            move_file(args.icon, target_folder, copy=not args.delete)

        desktop_file_path, valid = get_desktop_path(args.name)
        
        desktop_file_string = populate_desktop_file_string(
            name=args.name,
            icon=args.icon,
            exec=args.executable
        )
        desktop_file_path.write_text(desktop_file_string)
        print(f'{SUCCESS} {args.name} is now installed into {target_folder}.')
        os.system(f'update-desktop-database {LOCAL_DESKTOP_APP_PATH} && desktop-file-validate {desktop_file_path}')
        
    except Exception as e:
        print("There was a problem (reverting changes):",e.message)


def update(args):
    pass

def uninstall(args):
    target_folder, exists = get_installed(args.name)
    if not exists:
        print(f'{NOTICE} {args.name} is not installed.')
        return
    shutil.rmtree(target_folder)
    desktop_path, valid = get_desktop_path(args.name)
    if valid:
        desktop_path.unlink()
    print(f'{SUCCESS} Successfully uninstalled {args.name}.')

def list(args):
    pass

def no_action(args):
    print("No action specified. Use -h for help.")

parser = argparse.ArgumentParser(
    description="command-line utility to create and manage custom '.desktop' applications in Linux!"
)
parser.set_defaults(func=no_action)
subparsers = parser.add_subparsers(title="actions",description="valid actions",help="sub command help")
###############################
# Actions for Desktop Manager #
###############################
# INSTALL COMMAND
install_parser = subparsers.add_parser("install",help="add an executable to Desktop Manager")
install_parser.set_defaults(func=install)
install_parser.add_argument("-n","--name",required=True,dest="name",help="the name of the desktop shortcut")
install_parser.add_argument("-e","--executable",required=True,dest="executable",type=valid_file,help="the path of the executable to install")
install_parser.add_argument("-i","--icon",type=valid_file,required=False,dest="icon",help="the icon of the desktop shortcut")
install_parser.add_argument("-d","--delete",type=argparse.BooleanOptionalAction,required=False,dest="delete",help="delete the source executable and ")
# UPDATE COMMAND
update_parser = subparsers.add_parser("update",help="update the executable or icon of a managed shortcut")
update_parser.add_argument("-n","--name",dest="name",help="update the name of the shortcut")
update_parser.add_argument("-e","--executable",dest="executable",type=valid_file,help="update the executable of the shortcut")
update_parser.add_argument("-i","--icon",dest="icon",type=valid_file,help="update the icon of the shortcut")
# uninstall COMMAND
uninstall_parser = subparsers.add_parser("uninstall",help="uninstall an executable from Desktop Manager")
uninstall_parser.set_defaults(func=uninstall)
uninstall_parser.add_argument("-n","--name",dest="name",help="the name of the desktop shortcut to uninstall")
uninstall_parser.add_argument("-s","--save-path",dest="save",type=valid_dir,help="the path to save the executable and icon to If not specified, the executable and icon are deleted")
uninstall_parser.add_argument("-p","--preserve",type=argparse.BooleanOptionalAction,required=False,dest="preserve",help="preserve the source executable and icon")
# LIST COMMAND
list_parser = subparsers.add_parser("list", help="list app shortcuts managed by Desktop Manager")

args = parser.parse_args()
args.func(args)
